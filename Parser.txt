import requests
import time
import re
from bs4 import BeautifulSoup
import random


def movie_parser(movie='None', pageNum=0):
    data = []
    my_headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 '
                      'Safari/537.36'}
    pageNum = random.randint(2, 4)
    for n in range(1, pageNum + 1):
        page = 'https://www.rottentomatoes.com/m/' + movie + '/reviews?type=&sort=&page=' + str(n)
        src = False

        for i in range(1, 6):
            try:
                response = requests.get(page, headers=my_headers)
                src = response.content
                break
            except:
                print('failed attempt #', i)
                time.sleep(2)

            if not src:
                print('Could not get page: ', page)
                continue
            else:
                print('Successfully got page: ', page)

        soup = BeautifulSoup(src.decode('ascii', 'ignore'), 'lxml')
        reviews = soup.find_all('div', {'class': re.compile('row review_table_row')})
        movie_inf = soup.find('div', {'class': re.compile('bottom_divider')})

        for review in reviews:
            rating = 'NA'
            text = 'NA'

            d = review.find('div', {'class': re.compile('the_review')})
            d_t = d.text.strip()
            if d_t:
                text = d_t

            if review.find('div', {'class': re.compile('review_icon icon small fresh')}):
                rating = 'fresh'
            else:
                rating = 'rotten'

            data.append([text, rating])

        subs = movie_inf.find_all('li')
        '''Parse the runtime of the movie'''
        movie_long = 'NA'
        new_item = ''
        left = 0
        right = 0
        hour = 0
        f = str(subs[0])
        soup3 = BeautifulSoup(f, 'html.parser')
        times = soup3.find('li')
        item = times.contents[0].strip()

        if ',' in item:
            for i in range(len(item)):
                if item[i] == ',':
                    new_item = item[i+3:]
                    hour = int(new_item[0])
        else:
            new_item = item[:]
            hour = int(item[0])

        for j in range(len(new_item)):
            if new_item[j] == ' ':
                left = j
            elif new_item[j] == 'm':
                right = j
            else:
                continue

        if 'm' not in new_item:
            minute = 0
        else:
            minute = int(new_item[left+1:right])
        movie_long = 60*hour + minute
        for i in data:
            if str(movie_long) not in i:
                i.append(str(movie_long))

    with open("Reviews.txt", 'a', encoding='utf-8') as f:
        for i in data:
            if i[0] != "NA":
                st = '\t'.join(i)
                f.write(st)
                f.write('\n')


# Write the header into the file as the first row
with open("Reviews.txt", 'a', encoding='utf-8') as f:
    head = ['Review_Text', 'Rating', 'Runtime']
    b = '\t'.join(head)
    f.write(b)
    f.write('\n')

# Parse reviews from different movies and write all of them into a file
movie_parser(movie='fast_five')
movie_parser(movie='the_informer_2020')
movie_parser(movie='the_devil_all_the_time')
movie_parser(movie='citizen_kane')
movie_parser(movie='hubie_halloween')
movie_parser(movie='the_wizard_of_oz_1939')
movie_parser(movie='that_good_night')
movie_parser(movie='the_place_of_no_words')
movie_parser(movie='nomad_in_the_footsteps_of_bruce_chatwin')
movie_parser(movie='the_witches_2020')
movie_parser(movie='12_hour_shift')
movie_parser(movie='last_call_2020')
movie_parser(movie='lost_girls_and_love_hotels')
movie_parser(movie='bad_hair_2020')
movie_parser(movie='the_wretched_2020')
movie_parser(movie='dirt_music_2019')
movie_parser(movie='get_out')
movie_parser(movie='mad_max_fury_road')
movie_parser(movie='kindred_2020')
movie_parser(movie='the_devil_has_a_name')
movie_parser(movie='eternal_beauty')
movie_parser(movie='antebellum')
movie_parser(movie='the_witches_2020')
movie_parser(movie='jeg_er_din')
movie_parser(movie='ninja_shadow_of_a_tear')
movie_parser(movie='speak_the_music_robert_mann_and_the_mysteries_of_chamber_music')
movie_parser(movie='the_square_2013')
movie_parser(movie='over_the_moon_2020')
movie_parser(movie='widows_2018')
movie_parser(movie='american_relapse')
movie_parser(movie='the_head_hunter_2019')
movie_parser(movie='mulan_2020')
movie_parser(movie='trick_r_treat')
movie_parser(movie='born_in_flames')
movie_parser(movie='gentlemans_agreement')
movie_parser(movie='becket')
movie_parser(movie='behind_the_mask_the_rise_of_leslie_vernon')
movie_parser(movie='last_winter')
movie_parser(movie='fury_2015')
movie_parser(movie='rosewater')
movie_parser(movie='welcome_to_new_york_2015')
movie_parser(movie='curse_of_frankenstein')
movie_parser(movie='revenants')
movie_parser(movie='mortal_2020')
movie_parser(movie='murph_the_protector_2013')
movie_parser(movie='sharknado_2013')
movie_parser(movie='loneliness_of_the_long_distance_runner')
movie_parser(movie='stuck')
movie_parser(movie='jug_face')
movie_parser(movie='welcome_to_me')
movie_parser(movie='centigrade_2020')
movie_parser(movie='proximity_2020')
movie_parser(movie='tremors_shrieker_island')
movie_parser(movie='sibyl')
movie_parser(movie='spell_2020')
movie_parser(movie='body_cam')
movie_parser(movie='the_bay_of_silence')
movie_parser(movie='guns_akimbo')